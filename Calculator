import tkinter as tk
from tkinter import ttk
import math

# Словарь для хранения единиц измерения по типам
units = {
    "Длина": ["метры", "километры", "дециметры", "сантиметры", "миллиметры", "дюймы", "футы", "мили", "ярды", "нанометры", "морские мили"],
    "Масса": ["килограммы", "граммы", "тонны", "милиграммы", "центнеры", "гектограммы", "декаграммы", "дециграммы", "унции", "караты", "футы"],
    "Площадь": ["квадратные метры", "квадратные сантиметры", "квадратные миллиметры", "квадратные дециметры", "гектары", "акры", "квадратные километры", "квадратные футы", "квадратные ярды", "квадратные дюймы", "квадратные мили"],
    "Объём": ["литры", "миллилитры", "кубические метры", "кубические сантиметры", "кубические миллиметры", "кубические дециметры", "кубические километры", "кубические футы", "кубические дюймы", "кубические мили", "кубические ярды"],
    "Давление": ["паскали", "атмосферы", "бар"],
    "Скорость": ["метры в секунду", "километры в час", "метры в минуту", "километры в секунду"],
    "Температура": ["Цельсий", "Фаренгейт", "Кельвин"],
    "Энергия": ["джоуль", "килоджоуль", "мегаджоуль", "гигаджоуль", "кВт·ч", "калории", "пищевые калории", "фут-фунты"],
    "Время": ["секунды", "минуты", "часы", "дни", "недели", "месяцы", "годы"],
    "Данные": ["бит", "байт", "килобайт", "мегабайт", "гигабайт", "террабайт"],
    "Углы": ["градусы", "радианы", "градианы"]
}

# Основные единицы измерения для конвертации
primary_units = {
    "Длина": "метры",
    "Масса": "граммы",
    "Площадь": "квадратные метры",
    "Объём": "кубические метры",
    "Давление": "бары",
    "Скорость": "метры в секунду",
    "Температура": "Цельсий",
    "Мощность": "ватт",
    "Энергия": "джоуль",
    "Время": "секунды",
    "Данные": "байт",
    "Углы": "градусы"
}

# Коэффициенты перевода для разных единиц измерения
conversion_factors = {
    "Длина": {
        "метры": 1,
        "километры": 1000,
        "дециметры": 0.1,
        "сантиметры": 0.01,
        "миллиметры": 0.001,
        "дюймы": 0.0254,
        "футы": 0.3048,
        "мили": 1609.34,
        "ярды": 0.9144,
        "нанометры": 1e-9,
        "морские мили": 1852
    },
    "Масса": {
        "килограммы": 1000,
        "граммы": 1,
        "тонны": 1000000,
        "милиграммы": 0.001,
        "центнеры": 100000,
        "гектограммы": 100,
        "декаграммы": 10,
        "дециграммы": 0.1,
        "унции": 28.3495,
        "караты": 0.2,
        "футы": 0.453592
    },
    "Площадь": {
        "квадратные метры": 1,
        "квадратные сантиметры": 0.0001,
        "квадратные миллиметры": 0.000001,
        "квадратные дециметры": 0.01,
        "гектары": 10000,
        "акры": 4046.86,
        "квадратные километры": 1000000,
        "квадратные футы": 0.092903,
        "квадратные ярды": 0.836127,
        "квадратные дюймы": 0.00064516,
        "квадратные мили": 2589988.11
    },
    "Объём": {
        "литры": 1,
        "миллилитры": 0.001,
        "кубические метры": 1000,
        "кубические сантиметры": 0.000001,
        "кубические миллиметры": 1e-9,
        "кубические дециметры": 1,
        "кубические километры": 1000000000,
        "кубические футы": 28.3168,
        "кубические дюймы": 0.0163871,
        "кубические мили": 4.168e9,
        "кубические ярды": 0.764555
    },
    "Давление": {
        "паскали": 1,
        "атмосферы": 101325,
        "бар": 100000
    },
    "Скорость": {
        "метры в секунду": 1,
        "километры в час": 1000/3600,
        "метры в минуту": 1/60,
        "километры в секунду": 1000
    },
    "Температура": {},
    "Энергия": {
        "джоуль": 1,
        "килоджоуль": 1000,
        "мегаджоуль": 1e6,
        "гигаджоуль": 1e9,
        "кВт·ч": 3600000,
        "калории": 4.184,
        "пищевые калории": 4184,
        "фут-фунты": 1.35582
    },
    "Время": {
        "секунды": 1,
        "минуты": 60,
        "часы": 3600,
        "дни": 86400,
        "недели": 604800,
        "месяцы": 2592000,
        "годы": 31536000
    },
    "Данные": {
        "бит": 1,
        "байт": 8,
        "килобайт": 8192,
        "мегабайт": 8388608,
        "гигабайт": 8589934592,
        "террабайт": 8796093022208
    },
    "Углы": {
        "градусы": 1,
        "радианы": 180 / math.pi,
        "градианы": 200 / 180
    }
}

def append_to_expression(value):
    current_text = entry.get()
    entry.delete(0, tk.END)
    entry.insert(0, current_text + str(value))

def calculate():
    try:
        expression = entry.get().replace('sqr', '**')
        result = eval(expression)
        entry.delete(0, tk.END)
        entry.insert(0, result)
    except Exception:
        entry.delete(0, tk.END)
        entry.insert(0, "Ошибка")

def remove_last_character():
    current_text = entry.get()
    if current_text:
        entry.delete(0, tk.END)
        entry.insert(0, current_text[:-1])  # Удаляем только последний символ

def clear():
    for widget in root.winfo_children():
        widget.destroy()

def update_units(event):
    selected_type = type_unit.get()
    unit_from['values'] = units[selected_type]
    unit_to['values'] = units[selected_type]
    unit_from.current(0)
    unit_to.current(0)

def show_converter():
    clear()

    global entry_from
    entry_from = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_from.pack(pady=10)

    global type_unit
    type_unit = ttk.Combobox(root, values=list(units.keys()), state='readonly')
    type_unit.pack(pady=10)
    type_unit.current(0)
    type_unit.bind("<<ComboboxSelected>>", update_units)

    global unit_from
    unit_from = ttk.Combobox(root, values=units[type_unit.get()], state='readonly')
    unit_from.pack(pady=10)
    unit_from.current(0)

    global entry_to
    entry_to = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_to.pack(pady=10)

    global unit_to
    unit_to = ttk.Combobox(root, values=units[type_unit.get()], state='readonly')
    unit_to.pack(pady=10)
    unit_to.current(0)

    convert_button = tk.Button(root, text="Конвертировать", width=20, height=2, command=lambda: convert_units(entry_from.get(), unit_from.get(), unit_to.get()), bg='darkgray', relief='raised')
    convert_button.pack(pady=10)

    clear_button = tk.Button(root, text="Очистить", width=20, height=2, command=clear_entries, bg='darkgray', relief='raised')
    clear_button.pack(pady=10)

    back_button = tk.Button(root, text="Вернуться в калькулятор", width=20, height=2, command=create_calculator, bg='darkgray', relief='raised')
    back_button.pack(pady=10)

    # Кнопка для перехода в режим процентов
    percent_button = tk.Button(root, text='Проценты', width=15, height=2, command=show_percentage_calculator, bg='darkgray', relief='raised')
    percent_button.pack(pady=10)

    # Кнопка для перехода в режим скидок
    discount_button = tk.Button(root, text='Скидка', width=15, height=2, command=show_discount_calculator, bg='darkgray', relief='raised')
    discount_button.pack(pady=10)

def convert_units(value, from_unit, to_unit):
    try:
        base_value = float(value)
        measurement_type = type_unit.get()
        
        if measurement_type in conversion_factors:
            primary_unit = primary_units[measurement_type]
            
            if measurement_type == "Температура":
                if from_unit == "Цельсий":
                    if to_unit == "Фаренгейт":
                        result = (base_value * 9/5) + 32
                    elif to_unit == "Кельвин":
                        result = base_value + 273.15
                    else:
                        result = base_value
                elif from_unit == "Фаренгейт":
                    if to_unit == "Цельсий":
                        result = (base_value - 32) * 5/9
                    elif to_unit == "Кельвин":
                        result = (base_value - 32) * 5/9 + 273.15
                    else:
                        result = base_value
                elif from_unit == "Кельвин":
                    if to_unit == "Цельсий":
                        result = base_value - 273.15
                    elif to_unit == "Фаренгейт":
                        result = (base_value - 273.15) * 9/5 + 32
                    else:
                        result = base_value
            else:
                # Конвертация для других типов
                if measurement_type == "Углы":
                    result = base_value * (conversion_factors[measurement_type][from_unit] / conversion_factors[measurement_type][to_unit])
                else:
                    result = base_value * conversion_factors[measurement_type][from_unit] / conversion_factors[measurement_type][to_unit]

            entry_to.config(state='normal')
            entry_to.delete(0, tk.END)
            entry_to.insert(0, f"{result:.2f}")
            entry_to.config(state='normal')  # Делаем поле ввода активным
        else:
            entry_to.config(state='normal')
            entry_to.delete(0, tk.END)
            entry_to.insert(0, "Ошибка ввода")  # Если тип измерения не найден, выводим сообщение
            entry_to.config(state='normal')  # Делаем поле ввода активным
    except ValueError:
        # Если не удалось преобразовать значение в число, оставляем поле без изменений
        pass

def clear_entries():
    entry_from.delete(0, tk.END)  # Очищаем первое поле ввода
    entry_to.delete(0, tk.END)    # Очищаем второе поле ввода

def create_calculator():
    global root
    if 'root' not in globals() or root is None or not root.winfo_exists():
        root = tk.Tk()
        root.title("Калькулятор")
        root.configure(bg='lightgray')  # Устанавливаем светло-серый цвет фона окна
        root.iconbitmap('C:/Users/user/Pictures/CalculatorIcon.ico')

    clear()

    global entry
    entry = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry.grid(row=0, column=0, columnspan=5, padx=10, pady=10)

    buttons = [
        ('7', 1, 1), ('8', 1, 2), ('9', 1, 3),
        ('4', 2, 1), ('5', 2, 2), ('6', 2, 3),
        ('1', 3, 1), ('2', 3, 2), ('3', 3, 3),
        ('0', 4, 2), ('.', 4, 1), ('(', 5, 2),
        (')', 5, 1)
    ]

    for (text, row, col) in buttons:
        button = tk.Button(root, text=text, width=5, height=2, command=lambda t=text: append_to_expression(t), bg='darkgray', relief='raised')
        button.grid(row=row, column=col, padx=5, pady=5)

    operations = [
        ('+', 1, 0), ('-', 2, 0), ('*', 3, 0), ('/', 4, 0),
    ]

    for (text, row, col) in operations:
        button = tk.Button(root, text=text, width=5, height=2, command=lambda t=text: append_to_expression(t), bg='darkgray', relief='raised')
        button.grid(row=row, column=col, padx=5, pady=5)

    sqr_button = tk.Button(root, text='^', width=5, height=2, command=lambda: append_to_expression('**'), bg='darkgray', relief='raised')
    sqr_button.grid(row=4, column=3, padx=5, pady=5)

    sqrt_button = tk.Button(root, text='√', width=5, height=2, command=lambda: append_to_expression('**(1/2)'), bg='darkgray', relief='raised')
    sqrt_button.grid(row=1, column=4, padx=5, pady=5)

    cbrt_button = tk.Button(root, text='∛', width=5, height=2, command=lambda: append_to_expression('**(1/3)'), bg='darkgray', relief='raised')
    cbrt_button.grid(row=2, column=4, padx=5, pady=5)

    module_button = tk.Button(root, text='||', width=5, height=2, command=lambda: append_to_expression('abs('), bg='darkgray', relief='raised')
    module_button.grid(row=3, column=4, padx=5, pady=5)

    sin_button = tk.Button(root, text='sin', width=5, height=2, command=lambda: append_to_expression('math.sin('), bg='darkgray', relief='raised')
    sin_button.grid(row=5, column=4, padx=5, pady=5)

    cos_button = tk.Button(root, text='cos', width=5, height=2, command=lambda: append_to_expression('math.cos('), bg='darkgray', relief='raised')
    cos_button.grid(row=6, column=4, padx=5, pady=5)

    tan_button = tk.Button(root, text='tan', width=5, height=2, command=lambda: append_to_expression('math.tan('), bg='darkgray', relief='raised')
    tan_button.grid(row=6, column=3, padx=5, pady=5)

    ctg_button = tk.Button(root, text='ctg', width=5, height=2, command=lambda: append_to_expression('1/math.tan('), bg='darkgray', relief='raised')
    ctg_button.grid(row=6, column=2, padx=5, pady=5)
    
    log_button = tk.Button(root, text='log', width=5, height=2, command=lambda: append_to_expression('math.log('), bg='darkgray', relief='raised')
    log_button.grid(row=6, column=1, padx=5, pady=5)

    x_button = tk.Button(root, text='1/x', width=5, height=2, command=lambda: append_to_expression('1/'), bg='darkgray', relief='raised')
    x_button.grid(row=5, column=0, padx=5, pady=5)

    minusmodule_button = tk.Button(root, text='-||', width=5, height=2, command=lambda: append_to_expression('-abs('), bg='darkgray', relief='raised')
    minusmodule_button.grid(row=4, column=4, padx=5, pady=5)

    equals_button = tk.Button(root, text='=', width=5, height=2, command=calculate, bg='darkgray', relief='raised')
    equals_button.grid(row=5, column=3, padx=5, pady=5)

    clear_button = tk.Button(root, text='C', width=5, height=2, command=lambda: entry.delete(0, tk.END), bg='darkgray', relief='raised')  # Удаляет все символы
    clear_button.grid(row=6, column=0, padx=5, pady=5)

    del_button = tk.Button(root, text='Del', width=5, height=2, command=remove_last_character, bg='darkgray', relief='raised')  # Удаляет один символ
    del_button.grid(row=7, column=0, padx=5, pady=5)

    open_button = tk.Button(root, text='Конвертер единиц', width=15, height=2, command=show_converter, bg='darkgray', relief='raised')
    open_button.grid(row=7, column=5, padx=5, pady=5)

    # Кнопка для перехода в режим процентов
    percent_button = tk.Button(root, text='Проценты', width=15, height=2, command=show_percentage_calculator, bg='darkgray', relief='raised')
    percent_button.grid(row=6, column=5, padx=5, pady=5)

    # Кнопка для перехода в режим скидок
    discount_button = tk.Button(root, text='Скидка', width=15, height=2, command=show_discount_calculator, bg='darkgray', relief='raised')
    discount_button.grid(row=5, column=5, padx=5, pady=5)

    root.mainloop()

def show_percentage_calculator():
    clear()

    global entry_initial
    entry_initial = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_initial.pack(pady=10)

    global entry_percentage
    entry_percentage = tk.Entry(root, width=5, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_percentage.pack(side=tk.LEFT, padx=5, pady=10)

    percentage_label = tk.Label(root, text="%", font=('Arial', 24), bg='lightgray')
    percentage_label.pack(side=tk.LEFT)

    global entry_result
    entry_result = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_result.pack(pady=10)

    # Новое поле для вывода разницы
    global entry_difference
    entry_difference = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_difference.pack(pady=10)

    calculate_button = tk.Button(root, text="Рассчитать", width=20, height=2, command=calculate_percentage, bg='darkgray', relief='raised')
    calculate_button.pack(pady=10)

    clear_button = tk.Button(root, text="Очистить", width=20, height=2, command=clear_percentage_entries, bg='darkgray', relief='raised')
    clear_button.pack(pady=10)

    back_button = tk.Button(root, text="Конвертер единиц", width=20, height=2, command=show_converter, bg='darkgray', relief='raised')
    back_button.pack(pady=10)

    second_back_button = tk.Button(root, text="Вернуться в калькулятор", width=20, height=2, command=create_calculator, bg='darkgray', relief='raised')
    second_back_button.pack(pady=10)

    second_discount_button = tk.Button(root, text='Скидка', width=15, height=2, command=show_discount_calculator, bg='darkgray', relief='raised')
    second_discount_button.pack(pady=10)  # Изменено на pack

    entry_percentage.bind("<KeyRelease>", validate_percentage)


def validate_percentage(event):
    try:
        value = float(entry_percentage.get())
        if value < -100 or value > 100:
            entry_percentage.delete(0, tk.END)  # Очищаем поле, если значение вне диапазона
    except ValueError:
        entry_percentage.delete(0, tk.END)  # Очищаем поле, если введено не число

def calculate_percentage():
    try:
        initial_value = float(entry_initial.get())
        percentage_value = float(entry_percentage.get())
        result = initial_value * (1 + percentage_value / 100)
        difference = result - initial_value  # Вычисляем разницу

        entry_result.config(state='normal')
        entry_result.delete(0, tk.END)
        entry_result.insert(0, f"{result:.2f}")
        entry_result.config(state='normal')  # Делаем поле ввода активным

        entry_difference.config(state='normal')
        entry_difference.delete(0, tk.END)
        entry_difference.insert(0, f"{difference:.2f}")  # Выводим разницу
        entry_difference.config(state='normal')  # Делаем поле ввода активным
    except ValueError:
        entry_result.config(state='normal')
        entry_result.delete(0, tk.END)
        entry_result.insert(0, "Ошибка")  # Если ввод некорректен

def clear_percentage_entries():
    entry_initial.delete(0, tk.END)  # Очищаем первое поле ввода
    entry_percentage.delete(0, tk.END)  # Очищаем поле ввода процентов
    entry_result.delete(0, tk.END)  # Очищаем поле результата
    entry_difference.delete(0, tk.END)  # Очищаем поле разницы

# Новый режим скидок
def show_discount_calculator():
    clear()

    global entry_price
    entry_price = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_price.pack(pady=10)

    global entry_discount
    entry_discount = tk.Entry(root, width=5, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_discount.pack(side=tk.LEFT, padx=5, pady=10)

    discount_label = tk.Label(root, text="Скидка (%)", font=('Arial', 24), bg='lightgray')
    discount_label.pack(side=tk.LEFT)

    global entry_discount_amount
    entry_discount_amount = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_discount_amount.pack(pady=10)

    global entry_final_price
    entry_final_price = tk.Entry(root, width=16, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_final_price.pack(pady=10)

    # Поле ввода для НДС
    global entry_vat
    entry_vat = tk.Entry(root, width=5, font=('Arial', 24), borderwidth=2, relief="solid", bg='black', fg='white')
    entry_vat.pack(side=tk.LEFT, padx=5, pady=10)

    vat_label = tk.Label(root, text="НДС (%)", font=('Arial', 24), bg='lightgray')
    vat_label.pack(side=tk.LEFT)

    calculate_discount_button = tk.Button(root, text="Рассчитать", width=20, height=2, command=calculate_discount, bg='darkgray', relief='raised')
    calculate_discount_button.pack(pady=10)

    clear_discount_button = tk.Button(root, text="Очистить", width=20, height=2, command=clear_discount_entries, bg='darkgray', relief='raised')
    clear_discount_button.pack(pady=10)

    back_to_calculator_button = tk.Button(root, text="Вернуться в калькулятор", width=20, height=2, command=create_calculator, bg='darkgray', relief='raised')
    back_to_calculator_button.pack(pady=10)

    back_to_converter_button = tk.Button(root, text="Конвертер единиц", width=20, height=2, command=show_converter, bg='darkgray', relief='raised')
    back_to_converter_button.pack(pady=10)

    back_to_percentage_button = tk.Button(root, text="Проценты", width=20, height=2, command=show_percentage_calculator, bg='darkgray', relief='raised')
    back_to_percentage_button.pack(pady=10)

def calculate_discount():
    try:
        price = float(entry_price.get())
        discount = float(entry_discount.get())
        vat = float(entry_vat.get())  # Получаем значение НДС
        discount_amount = price * (discount / 100)
        final_price = price - discount_amount
        final_price_with_vat = final_price + (final_price * (vat / 100))  # Итоговая цена с учетом НДС

        entry_discount_amount.config(state='normal')
        entry_discount_amount.delete(0, tk.END)
        entry_discount_amount.insert(0, f"{discount_amount:.2f}")
        entry_discount_amount.config(state='normal')  # Делаем поле ввода активным

        entry_final_price.config(state='normal')
        entry_final_price.delete(0, tk.END)
        entry_final_price.insert(0, f"{final_price_with_vat:.2f}")  # Выводим итоговую цену с учетом НДС
        entry_final_price.config(state='normal')  # Делаем поле ввода активным
    except ValueError:
        entry_discount_amount.config(state='normal')
        entry_discount_amount.delete(0, tk.END)
        entry_discount_amount.insert(0, "Ошибка")  # Если ввод некорректен

def clear_discount_entries():
    entry_price.delete(0, tk.END)  # Очищаем поле ввода цены
    entry_discount.delete(0, tk.END)  # Очищаем поле ввода скидки
    entry_vat.delete(0, tk.END)  # Очищаем поле ввода НДС
    entry_discount_amount.delete(0, tk.END)  # Очищаем поле суммы скидки
    entry_final_price.delete(0, tk.END)  # Очищаем поле итоговой цены

if __name__ == "__main__":
    create_calculator()
